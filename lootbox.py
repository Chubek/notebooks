# -*- coding: utf-8 -*-
"""lootbox.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JeWJrp-FbXZztzZwraFE9KIRDYNjze3Y
"""

import numpy as np
import pandas as pd
from sklearn.utils import shuffle

!python -c "import nltk; nltk.download('stopwords')"

from random_word import RandomWords
r = RandomWords()
from sklearn.utils import shuffle



from google.colab import drive
drive.mount('/content/drive')

prizes = []
f = open("/content/drive/My Drive/prizes", 'r')
for line in f.readlines():
  prizes.append(line.strip())

synonyms = []

from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize
from random import randint
import nltk.data

tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')

for prize in prizes:
  # Load the pretrained neural net
  

# Tokenize the text
  tokenized = tokenizer.tokenize(prize)

# Get the list of words from the entire text
  words = word_tokenize(prize)

# Identify the parts of speech
  tagged = nltk.pos_tag(words)

  for i in range(0,len(words)):
    replacements = []

    # Only replace nouns with nouns, vowels with vowels etc.
      for syn in wordnet.synsets(words[i]):

        # Do not attempt to replace proper nouns or determiners
          if tagged[i][1] == 'NNP' or tagged[i][1] == 'DT':
            break
        
        # The tokenizer returns strings like NNP, VBP etc
        # but the wordnet synonyms has tags like .n.
        # So we extract the first character from NNP ie n
        # then we check if the dictionary word has a .n. or not 
         word_type = tagged[i][1][0].lower()
        if syn.name().find("."+word_type+"."):
             # extract the word only
            r = syn.name()[0:syn.name().find(".")]
            replacements.append(r)

     if len(replacements) > 0:
        # Choose a random replacement
        replacement = replacements[randint(0,len(replacements)-1)]
        output = output + " " + replacement
     else:
        # If no replacement could be found, then just use the
        # original word
        output = output + " " + words[i]

      synonyms.append(output)

prize_keywords[2]

from Crypto.Cipher import AES
from Crypto import Random
key = "KILL WILLIAM"
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
msg = iv + cipher.encrypt('Attack at dawn')
msg.encode("hex")

!pip install Crypto

!pip install pycrypto

